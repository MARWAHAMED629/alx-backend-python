pipeline {
    agent any
    
    environment {
        PYTHON_VERSION = '3.11'
        DOCKER_IMAGE = 'your-dockerhub-username/messaging-app'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Setup Python') {
            steps {
                script {
                    // Install Python if not available
                    sh 'python3 --version || echo "Python not found, installing..."'
                    sh '''
                        if ! command -v python3 &> /dev/null; then
                            sudo apt-get update
                            sudo apt-get install -y python3 python3-pip python3-venv
                        fi
                    '''
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                dir('messaging_app') {
                    sh 'python3 -m pip install --upgrade pip'
                    sh 'python3 -m pip install -r requirements.txt'
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                dir('messaging_app') {
                    sh '''
                        # Set up environment variables for testing
                        export DEBUG=True
                        export DB_NAME=test_db
                        export DB_USER=test_user
                        export DB_PASSWORD=test_password
                        export DB_HOST=localhost
                        export DB_PORT=3306
                        
                        # Run tests with pytest and generate coverage report
                        python3 -m pytest --cov=. --cov-report=html --cov-report=xml --junitxml=test-results.xml -v
                    '''
                }
            }
            post {
                always {
                    dir('messaging_app') {
                        // Publish test results
                        publishTestResults testResultsPattern: 'test-results.xml'
                        
                        // Publish coverage report
                        publishCoverage adapters: [coberturaAdapter('coverage.xml')], sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
                        
                        // Archive test results
                        archiveArtifacts artifacts: 'htmlcov/**/*', allowEmptyArchive: true
                        archiveArtifacts artifacts: 'coverage.xml', allowEmptyArchive: true
                        archiveArtifacts artifacts: 'test-results.xml', allowEmptyArchive: true
                    }
                }
            }
        }
        
        stage('Code Quality Check') {
            steps {
                dir('messaging_app') {
                    sh 'python3 -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics'
                    sh 'python3 -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                dir('messaging_app') {
                    script {
                        // Build Docker image
                        sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                        sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest"
                    }
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    // Login to Docker Hub (credentials should be configured in Jenkins)
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                        
                        // Push Docker image
                        dir('messaging_app') {
                            sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
                            sh "docker push ${DOCKER_IMAGE}:latest"
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            // Clean up Docker images
            sh "docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true"
            sh "docker rmi ${DOCKER_IMAGE}:latest || true"
            
            // Clean workspace
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
} 