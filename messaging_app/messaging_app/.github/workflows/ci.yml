name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r messaging_app/requirements.txt
    
    - name: Run linting with flake8
      run: |
        cd messaging_app
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run tests with pytest
      env:
        DEBUG: True
        DB_NAME: test_db
        DB_USER: test_user
        DB_PASSWORD: test_password
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        SECRET_KEY: test-secret-key-for-ci
      run: |
        cd messaging_app
        python manage.py migrate
        pytest --cov=. --cov-report=xml --cov-report=html --junitxml=test-results.xml -v
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./messaging_app/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          messaging_app/test-results.xml
          messaging_app/htmlcov/
          messaging_app/coverage.xml
    
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const coveragePath = 'messaging_app/coverage.xml';
            if (fs.existsSync(coveragePath)) {
              const coverage = fs.readFileSync(coveragePath, 'utf8');
              const linesMatch = coverage.match(/lines-valid="(\d+)" lines-covered="(\d+)"/);
              if (linesMatch) {
                const total = parseInt(linesMatch[1]);
                const covered = parseInt(linesMatch[2]);
                const percentage = ((covered / total) * 100).toFixed(2);
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `## Test Results âœ…
                  
                  **Code Coverage:** ${percentage}% (${covered}/${total} lines)
                  
                  All tests passed successfully! ðŸŽ‰`
                });
              }
            }
          } catch (error) {
            console.log('Could not read coverage file or create comment:', error);
          } 