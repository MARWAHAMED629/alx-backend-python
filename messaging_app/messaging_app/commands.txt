# ==========================================
# Kubernetes Commands for Django Messaging App
# ==========================================
# This file documents all commands used for deployment, scaling, testing, 
# blue-green strategy, ingress setup, troubleshooting, and cleanup.

# ------------------------------------------
# üü¢ 1. Start and Prepare Minikube Cluster
# ------------------------------------------
minikube start                             # Start local Kubernetes cluster
minikube addons enable ingress             # Enable NGINX Ingress controller

# ------------------------------------------
# üîµ 2. Deploy Blue Version of the App
# ------------------------------------------
kubectl apply -f blue_deployment.yaml      # Deploy blue version
kubectl apply -f kubeservice.yaml          # Create service for blue/green switching
kubectl apply -f ingress.yaml              # Configure ingress to expose app

# ------------------------------------------
# üåê 3. Local Domain Resolution
# ------------------------------------------
echo "192.168.49.2 messaging-app.local api.messaging-app.local" | sudo tee -a /etc/hosts

# ------------------------------------------
# üü© 4. Green Deployment & Traffic Switch (Automated)
# ------------------------------------------
./kubctl-0x02 deploy                       # Deploy green version
./kubctl-0x02 switch green                 # Route traffic to green version
./kubctl-0x02 switch blue                  # Route traffic to blue version
./kubctl-0x02 rollback                     # Roll back to previous version
./kubctl-0x02 status                       # Check status of deployments
./kubctl-0x02 logs green 50                # Show logs from green version
./kubctl-0x02 logs blue 100                # Show logs from blue version
./kubctl-0x02 health-check django-messaging-service
./kubctl-0x02 health-check django-messaging-service-green-test
./kubctl-0x02 test 60 20                   # Run load test (60s, 20 connections)
./kubctl-0x02 cleanup green                # Delete green version after switching
./kubctl-0x02 cleanup blue                 # Delete blue version after switching

# ------------------------------------------
# üìà 5. App Scaling and Load Testing
# ------------------------------------------
./kubctl-0x01                              # Scale up to 3 replicas, run wrk, monitor usage

# ------------------------------------------
# üîç 6. Manual Kubernetes Monitoring
# ------------------------------------------
kubectl get pods -l app=django-messaging-app
kubectl get deployments -l app=django-messaging-app
kubectl get services -l app=django-messaging-app
kubectl get ingress
kubectl describe ingress django-messaging-ingress
kubectl describe service django-messaging-service
kubectl get pods -l app=django-messaging-app -o wide

# Manually switch traffic between versions (edit service selector)
kubectl patch service django-messaging-service -p '{"spec":{"selector":{"app":"django-messaging-app","version":"green"}}}'
kubectl patch service django-messaging-service -p '{"spec":{"selector":{"app":"django-messaging-app","version":"blue"}}}'

# ------------------------------------------
# üß™ 7. Endpoint & Load Testing
# ------------------------------------------
curl -H "Host: messaging-app.local" http://192.168.49.2/
curl -H "Host: messaging-app.local" http://192.168.49.2/api/
curl -H "Host: messaging-app.local" http://192.168.49.2/admin/
curl -H "Host: messaging-app.local" http://192.168.49.2/swagger/

kubectl run test-pod --image=curlimages/curl --rm -i --restart=Never -- curl http://django-messaging-service/admin/
kubectl run load-test --image=williamyeh/wrk --rm -i --restart=Never -- -t4 -c10 -d30s http://django-messaging-service/admin/

# ------------------------------------------
# üß∞ 8. Troubleshooting & Debugging
# ------------------------------------------
kubectl logs -l app=django-messaging-app,version=blue --tail=50
kubectl logs -l app=django-messaging-app,version=green --tail=50
kubectl logs -n ingress-nginx deployment/ingress-nginx-controller

kubectl describe pod <pod-name>
kubectl exec -it <pod-name> -- /bin/bash

kubectl get endpoints django-messaging-service
kubectl get endpoints django-messaging-service-green-test

kubectl top nodes
kubectl top pods -l app=django-messaging-app

# ------------------------------------------
# üßπ 9. Cleanup (Deployments, Resources, etc.)
# ------------------------------------------
kubectl delete -f green_deployment.yaml
kubectl delete -f blue_deployment.yaml
kubectl delete -f kubeservice.yaml
kubectl delete -f ingress.yaml
kubectl delete pod --field-selector=status.phase==Succeeded
kubectl delete all -l app=django-messaging-app
minikube stop