#!/bin/bash

# Rolling Update Automation Script for Django Messaging App
# This script performs a seamless (zero-downtime) rolling update by:
# 1. Applying the updated deployment manifest
# 2. Monitoring the rollout status in real time
# 3. Continuously testing service availability during the rollout
# 4. Validating rollout success after deployment

set -e  # Exit immediately if a command exits with a non-zero status

# ANSI color codes for styled terminal output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration values
NAMESPACE=${NAMESPACE:-default}
DEPLOYMENT_NAME="django-messaging-app-blue"
SERVICE_NAME="django-messaging-service"
DEPLOYMENT_FILE="blue_deployment.yaml"
TEST_ENDPOINT="/admin/"
CURL_TIMEOUT=5
TEST_INTERVAL=2
MAX_ROLLOUT_TIMEOUT=300  # 5 minutes

# Print functions for formatted messages
print_info()      { echo -e "${BLUE}[INFO]${NC} $1"; }
print_success()   { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
print_warning()   { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error()     { echo -e "${RED}[ERROR]${NC} $1"; }
print_test()      { echo -e "${CYAN}[TEST]${NC} $1"; }

# Ensure required CLI tools are installed
check_dependencies() {
    local missing_deps=()
    for cmd in kubectl curl; do
        if ! command -v "$cmd" &> /dev/null; then
            missing_deps+=("$cmd")
        fi
    done
    if [ ${#missing_deps[@]} -ne 0 ]; then
        print_error "Missing dependencies: ${missing_deps[*]}"
        exit 1
    fi
    print_success "All required tools are installed"
}

# Retrieve the internal ClusterIP endpoint of the service
get_service_endpoint() {
    local service_ip=$(kubectl get service "$SERVICE_NAME" -n "$NAMESPACE" -o jsonpath='{.spec.clusterIP}')
    local service_port=$(kubectl get service "$SERVICE_NAME" -n "$NAMESPACE" -o jsonpath='{.spec.ports[0].port}')
    if [ -z "$service_ip" ] || [ -z "$service_port" ]; then
        print_error "Unable to retrieve service endpoint"
        return 1
    fi
    echo "http://$service_ip:$service_port"
}

# Perform a single availability test from inside the cluster
test_application() {
    local endpoint="$1"
    local timeout="$2"
    local test_pod_name="curl-test-$(date +%s)"
    kubectl run "$test_pod_name" \
        --image=curlimages/curl --rm -i --restart=Never \
        --timeout="${timeout}s" --quiet \
        -- curl -s -f --max-time "$timeout" "${endpoint}${TEST_ENDPOINT}" > /dev/null 2>&1
}

# Run continuous availability checks in the background during rollout
continuous_availability_test() {
    local endpoint="$1"
    local duration="$2"
    local success_count=0 failure_count=0 total_tests=0
    local end_time=$(( $(date +%s) + duration ))

    print_info "Monitoring availability for ${duration}s..."
    print_test "Endpoint: ${endpoint}${TEST_ENDPOINT}"

    while [ $(date +%s) -lt $end_time ]; do
        total_tests=$((total_tests + 1))
        if test_application "$endpoint" "$CURL_TIMEOUT"; then
            success_count=$((success_count + 1)); echo -n "✓"
        else
            failure_count=$((failure_count + 1)); echo -n "✗"
        fi
        [ $((total_tests % 10)) -eq 0 ] && echo " [${total_tests} tests]"
        sleep "$TEST_INTERVAL"
    done

    echo
    local success_rate=$((success_count * 100 / total_tests))

    print_test "Summary:"
    print_test "  Total: $total_tests | Success: $success_count | Failures: $failure_count | Rate: ${success_rate}%"

    if [ $success_rate -ge 90 ]; then
        print_success "Excellent availability"
    elif [ $success_rate -ge 75 ]; then
        print_warning "Acceptable availability"
    else
        print_error "Poor availability"
    fi

    return $failure_count
}

# Display the current rollout and pod status
show_deployment_status() {
    print_info "Deployment Info:"
    kubectl get deployment "$DEPLOYMENT_NAME" -n "$NAMESPACE" -o wide || print_warning "Deployment not found"
    echo
    print_info "Pods:"
    kubectl get pods -l "app=django-messaging-app" -n "$NAMESPACE" -o wide || print_warning "No pods found"
    echo
    print_info "Rollout History:"
    kubectl rollout history deployment/"$DEPLOYMENT_NAME" -n "$NAMESPACE" || print_warning "No history available"
}

# Monitor the Kubernetes rollout process
monitor_rollout() {
    local deployment_name="$1"
    local timeout="$2"

    print_info "Waiting for rollout of $deployment_name (timeout ${timeout}s)..."
    {
        kubectl rollout status deployment/"$deployment_name" -n "$NAMESPACE" --timeout="${timeout}s"
        echo $? > /tmp/rollout_exit_code
    } &
    
    local pid=$!
    while kill -0 $pid 2>/dev/null; do
        echo "--- $(date) ---"
        kubectl get pods -l "app=django-messaging-app" -n "$NAMESPACE" \
            -o custom-columns=NAME:.metadata.name,STATUS:.status.phase,READY:.status.containerStatuses[0].ready,RESTARTS:.status.containerStatuses[0].restartCount,AGE:.metadata.creationTimestamp
        sleep 10
    done

    wait $pid
    local code=$(cat /tmp/rollout_exit_code 2>/dev/null || echo 1)
    rm -f /tmp/rollout_exit_code

    if [ "$code" -eq 0 ]; then
        print_success "Rollout succeeded"
        return 0
    else
        print_error "Rollout failed or timed out"
        return 1
    fi
}

# Validate if rollout finished and the app is healthy
verify_rollout_completion() {
    print_info "Verifying deployment state..."

    local desired=$(kubectl get deployment "$DEPLOYMENT_NAME" -n "$NAMESPACE" -o jsonpath='{.spec.replicas}')
    local ready=$(kubectl get deployment "$DEPLOYMENT_NAME" -n "$NAMESPACE" -o jsonpath='{.status.readyReplicas}')
    local updated=$(kubectl get deployment "$DEPLOYMENT_NAME" -n "$NAMESPACE" -o jsonpath='{.status.updatedReplicas}')

    print_info "Replicas - Desired: $desired | Ready: $ready | Updated: $updated"

    if [ "$desired" = "$ready" ] && [ "$desired" = "$updated" ]; then
        print_success "All pods updated and ready"
    else
        print_warning "Mismatch in replica states"
        return 1
    fi

    print_info "Verifying pod images:"
    kubectl get pods -l "app=django-messaging-app" -n "$NAMESPACE" \
        -o custom-columns=NAME:.metadata.name,IMAGE:.spec.containers[0].image,STATUS:.status.phase

    print_info "Performing final health check..."
    local endpoint=$(get_service_endpoint)
    if test_application "$endpoint" 10; then
        print_success "Service is reachable"
    else
        print_error "Service health check failed"
        return 1
    fi
}

# Execute the entire update workflow
perform_rolling_update() {
    print_info "Starting rolling update..."

    if [ ! -f "$DEPLOYMENT_FILE" ]; then
        print_error "Missing deployment file: $DEPLOYMENT_FILE"
        exit 1
    fi

    show_deployment_status

    local endpoint=$(get_service_endpoint) || exit 1
    print_success "Target endpoint: $endpoint"

    print_info "Initial health check..."
    test_application "$endpoint" 10 || {
        print_error "Initial service test failed"
        exit 1
    }

    print_info "Applying new deployment..."
    kubectl apply -f "$DEPLOYMENT_FILE" -n "$NAMESPACE" && print_success "Applied successfully"

    print_info "Running availability check during rollout..."
    continuous_availability_test "$endpoint" 120 &
    local test_pid=$!

    monitor_rollout "$DEPLOYMENT_NAME" "$MAX_ROLLOUT_TIMEOUT" || {
        kill $test_pid 2>/dev/null
        wait $test_pid 2>/dev/null
        exit 1
    }

    wait $test_pid
    local test_result=$?

    verify_rollout_completion || exit 1

    show_deployment_status

    if [ $test_result -eq 0 ]; then
        print_success "✅ Update completed with zero downtime!"
    else
        print_warning "⚠️ Update completed but had availability issues"
    fi
}

# Rollback if needed
rollback_deployment() {
    print_warning "Initiating rollback..."
    kubectl rollout undo deployment/"$DEPLOYMENT_NAME" -n "$NAMESPACE" || {
        print_error "Rollback command failed"
        exit 1
    }

    monitor_rollout "$DEPLOYMENT_NAME" 180
    verify_rollout_completion
}

# Help menu
usage() {
    echo "Usage: $0 {update|status|rollback|test|help}"
    echo
    echo "Commands:"
    echo "  update     Run a rolling update with availability testing"
    echo "  status     Display current deployment and pod status"
    echo "  rollback   Revert to the previous deployment revision"
    echo "  test       Manually test app availability"
    echo "  help       Show this help information"
    echo
    echo "Environment:"
    echo "  NAMESPACE  Set target namespace (default: default)"
}

# Entry point
main() {
    local command=${1:-update}
    case $command in
        update)    check_dependencies; perform_rolling_update ;;
        status)    show_deployment_status ;;
        rollback)  check_dependencies; rollback_deployment ;;
        test)      check_dependencies
                   local endpoint=$(get_service_endpoint)
                   print_info "Testing availability at $endpoint"
                   test_application "$endpoint" 10 && print_success "App is healthy" || print_error "App is down"
                   ;;
        help|--help|-h) usage ;;
        *)         print_error "Unknown command: $command"; usage; exit 1 ;;
    esac
}

main "$@"
